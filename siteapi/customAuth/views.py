from django.shortcuts import render
from rest_framework import generics
from .serializers import UserSerializer, ChangePasswordSerializer, ListUserSerializer, RegistrationSerializer, LoginSerializer, TemporaryTokenSerializer, JWTTokenSerializer
from rest_framework.views import APIView
from django.contrib.auth import authenticate
from rest_framework.response import Response
from rest_framework import status
from .models import CustomJWTToken, ScuzzyFoxContentManagerUser, TemporaryToken
from .backends import TemporaryTokenAuthentication, JWTAuthentication


# List the temporary tokens that currently exist


class ListTempTokens(generics.ListAPIView):
    permission_classes = ()
    serializer_class = TemporaryTokenSerializer
    queryset = TemporaryToken.objects.all()

# List the JWT tokens that currently exist


class ListJWTTokens(generics.ListAPIView):
    permission_classes = ()
    serializer_class = JWTTokenSerializer
    queryset = CustomJWTToken.objects.all()


class Register(APIView):
    # someone needs to have been given a token for you to register
    # you need to have a JWT token to be able to generate a registration token
    authentication_classes = [TemporaryTokenAuthentication, JWTAuthentication]
    serializer_class = RegistrationSerializer

    def get(self, request):
        """generates and returns a token for someone to register to the site if you provide your JWT token."""

        # create a token belonging to the logged in user.
        token = TemporaryToken.objects.create(user=request.user)
        return Response({"Token": token.key})

    def post(self, request):
        """Registers a new user provided that they have a temporary token generated by an existing user.

        """
        # requestData = dict(request.data)
        # usernames are all lowercase
        # request.data["username"] = str(request.data["username"]).lower()
        serializer = RegistrationSerializer(data=request.data)
        if serializer.is_valid():
            data = serializer.validated_data
            user = ScuzzyFoxContentManagerUser.objects.create_user(
                username=str(data["username"]).lower(), email=data["email"], password=data["password"])
            # CustomJWTToken.objects.create(user=user)

            # should return the user's data (including token)
            return Response(UserSerializer(user).data)
        else:
            return Response({"error": "invalid data", "data": requestData}, status=status.HTTP_400_BAD_REQUEST)


class Login(APIView):

    permission_classes = ()
    serializer_class = LoginSerializer

    def post(self, request):
        """Logs the user in if they provide the right username and password.

        Accessible to anyone."""

        # all usernames are lowercase
        username = str(request.data.get("username")).lower()

        password = request.data.get("password")

        # django built in authenticate method that automatically calls the authenticate method in
        # customAuth.backends.
        # returns None if authentication fails
        user = authenticate(username=username, password=password)

        if user:
            # refresh the jwt token (expiration and version number).
            CustomJWTToken.objects.get(user=user).save()
            user_serializer = UserSerializer(user)
            returnData = dict(user_serializer.data)

            return Response(returnData)
        else:
            return Response({"error": "Wrong Credentials"}, status=status.HTTP_400_BAD_REQUEST)


class ResetPassword(APIView):
    """Changes the user's password if they are logged in and provide their current password.
    new password has to be confirmed twice."""
    authentication_classes = [JWTAuthentication]

    def post(self, request):
        user = request.user
        content = dict(request.data)
        content["username"] = user.username

        # the serializer has a username property to double check using django's built in authenticate()
        # JWT token is also needed for this
        serializer = ChangePasswordSerializer(data=content)
        if serializer.is_valid():
            user.set_password(serializer.validated_data['new_password'])
            user.save()

            # update the JWT token (because the user's version has now changed)
            CustomJWTToken.objects.get(user=user).save()

            user_serializer = UserSerializer(user)
            returnData = dict(user_serializer.data)
            return Response(returnData)
        else:
            return Response({"error": "could not validate new passwords"}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class CheckJWTToken(APIView):
    """Checks if a JWT token is valid."""
    authentication_classes = [JWTAuthentication]

    def get(self, request):
        return Response({"Authentication": True})


class DeleteUser(APIView):
    """Delete user if they are logged in.
    password must be provided as well."""
    authentication_classes = [JWTAuthentication]

    def delete(self, request):
        user = request.user
        user_serializer = UserSerializer(user)

        confirmedUser = authenticate(
            username=user.username, password=request.data["password"])

        if confirmedUser is not None:
            confirmedUser.delete()

        # ScuzzyFoxContentManagerUser.objects.get(id=user.id).delete()

        return Response(user_serializer.data, status=status.HTTP_200_OK)


class ListUsers(APIView):
    """List all users"""
    permission_classes = ()

    def get(self, request):
        users = ScuzzyFoxContentManagerUser.objects.all()
        serializer = ListUserSerializer(users, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)
